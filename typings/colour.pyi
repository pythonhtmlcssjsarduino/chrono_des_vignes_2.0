from typing import Any, Callable, Generator, Tuple, Optional, Union

def hash_or_str(obj: Any) -> Union[int, str]: ...

class Color:
    web: str
    equality: Callable[['Color', 'Color'], bool]

    def __init__(
        self,
        color: Any = ...,
        pick_for: Any = ...,
        picker: Callable[[Any], str] = ...,
        pick_key: Optional[Callable[[Any], Any]] = ...,
        **kwargs: Any
    ) -> None: ...

    def __getattr__(self, label: str) -> Any: ...
    def __setattr__(self, label: str, value: Any) -> None: ...

    def get_hsl(self) -> Tuple[float, float, float]: ...
    def get_hex(self) -> str: ...
    def get_hex_l(self) -> str: ...
    def get_rgb(self) -> Tuple[float, float, float]: ...
    def get_hue(self) -> float: ...
    def get_saturation(self) -> float: ...
    def get_luminance(self) -> float: ...
    def get_red(self) -> float: ...
    def get_green(self) -> float: ...
    def get_blue(self) -> float: ...
    def get_web(self) -> str: ...

    def set_hsl(self, value: Tuple[float, float, float]) -> None: ...
    def set_rgb(self, value: Tuple[float, float, float]) -> None: ...
    def set_hue(self, value: float) -> None: ...
    def set_saturation(self, value: float) -> None: ...
    def set_luminance(self, value: float) -> None: ...
    def set_red(self, value: float) -> None: ...
    def set_green(self, value: float) -> None: ...
    def set_blue(self, value: float) -> None: ...
    def set_hex(self, value: str) -> None: ...
    def set_web(self, value: str) -> None: ...

    set_hex_l: Callable[[str], None]

    def range_to(self, value: Any, steps: int) -> Generator['Color', None, None]: ...

    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
