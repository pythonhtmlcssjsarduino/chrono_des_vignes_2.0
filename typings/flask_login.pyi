from typing import Any, Optional, Callable, Union
from flask import Request, Response
from datetime import timedelta
from chrono_des_vignes.models import User

class UserMixin:
    """
    Mixin providing default implementations:
      - is_authenticated, is_active, is_anonymous, get_id()
    """
    @property
    def is_authenticated(self) -> bool: ...
    @property
    def is_active(self) -> bool: ...
    @property
    def is_anonymous(self) -> bool: ...
    def get_id(self) -> str: ...

class LoginManager:
    """
    Manages login sessions and callbacks.
    """
    session_protection: Union[None, str]
    login_message: Optional[str]
    login_view: Optional[str]
    login_message_category: Optional[str]
    refresh_view: Optional[str]
    needs_refresh_message: Optional[str]
    needs_refresh_message_category: Optional[str]

    def __init__(self, app: Any = ...) -> None: ...
    def init_app(self, app: Any) -> None: ...

    def user_loader(self, callback: Callable[[str], Optional[User]]) -> Callable[[str], Optional[User]]: ...
    def request_loader(self, callback: Callable[[Request], Optional[User]]) -> Callable[[Request], Optional[User]]: ...
    def unauthorized_handler(self, callback: Callable[[], Response]) -> Callable[[], Response]: ...
    # def login_view(self, view: str) -> None: ...
    # def refresh_view(self, view: str) -> None: ...

def login_user(user: User, remember: bool = ..., duration: Optional[timedelta] = ..., force: bool = ..., fresh: bool = ...) -> bool: ...
def logout_user() -> None: ...
current_user:User
def login_required(func: Callable[..., Any]) -> Callable[..., Any]: ...